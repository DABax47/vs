{"version":3,"sources":["components/Form/Form.js","components/subcomponents/Teamcard/Teamcard.js","components/Roster/Roster.js","components/subcomponents/Matchup/Matchup.js","components/Match/Match.js","components/Nav/Nav.js","helpers/shuffle.js","helpers/splitplayers.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Form","state","teamName","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addPlayer","autoComplete","id","onSubmit","this","className","name","onChange","type","placeholder","Component","Teamcard","team","Roster","players","map","playerData","index","key","Matchup","onClick","remove","matches","L2","win","length","L1","Match","started","startTournament","match","prevState","div","m","Nav","to","shuffle","arr","sort","Math","random","split","pLA","pLB","i","push","winToken","played","App","placeHolderData","currentMatches","roster","console","log","filter","p","len","winner","find","elm","alert","clearPlayer","addMatch","exact","path","class","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6dd22542.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport \"./form.css\";\nclass Form extends Component {\n  // FORM will have input fields so initialize local state to handle the defaul;t behavior of the form elements\n  //init State\n  //one property per input feild to collect multiple fields of data\n  state = {\n    teamName: \"\",\n  };\n\n  // Methods\n\n  /**************\n   ***\n   *** HandleChange will handle any changes in the input fields and update the state to reflect the value\n   ***PARAMS----event\n   *** setState() of each state property {playerName, teamName} to the value of he e.target\n   ****/\n  handleChange = (e) => {\n    this.setState({ teamName: e.target.value });\n  };\n\n  /**************\n   ***\n   *** handleSubmit will prevent the default actions from executing on the form element and\n   *** this method will call the addPlayer method that has been passed down via props sending the current states playerName and TeamName\n   ***PARAMS----event\n   ***\n   ****/\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addPlayer(this.state.teamName);\n\n    this.setState({ teamName: \"\" });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <form\n          autoComplete=\"off\"\n          id=\"signup-form\"\n          onSubmit={this.handleSubmit}\n          className=\"\"\n        >\n          <input\n            name=\"TeamName\"\n            onChange={this.handleChange}\n            value={this.state.teamName}\n            type=\"text\"\n            placeholder=\"Team Name\"\n          />\n\n          <input\n            id=\"signup-btn\"\n            type=\"submit\"\n            value=\"submit\"\n            className=\"btn btn-warning \"\n          />\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./teamcard.css\";\nconst Teamcard = (props) => {\n  const team = props.teamName;\n\n  return (\n    <div id=\"show-card\" className=\" \">\n      <h5 className=\" content\"> {team}</h5>\n    </div>\n  );\n};\nexport default Teamcard;\n","import React, { Component } from \"react\";\nimport Teamcard from \"../subcomponents/Teamcard/Teamcard\";\nimport \"./roster.css\";\nclass Roster extends Component {\n  render() {\n    return (\n      //return a teamCard for every object in the playerList State\n      <div id=\"roster\">\n        {this.props.players.map((playerData, index) => (\n          <Teamcard\n            teamName={playerData.team}\n            key={index}\n            id={playerData.id}\n            players={playerData}\n          />\n        ))}\n      </div>\n    );\n  }\n}\nexport default Roster;\n\n// <div id=\"roster\" className=\"d-flex flex-wrap justify-content-between\">\n//   {this.state.roster.map((playerData, index) => (\n//     <Teamcard\n//       name={playerData.playerNames}\n//       teamName={playerData.team}\n//       key={index}\n//       id={playerData.id}\n//       players={playerData}\n//     />\n//   ))}\n// </div>\n","import React from \"react\";\nimport \"./matchup.css\";\nconst Matchup = (props) => {\n  // console.log(props.matches.L2[props.index].id);\n  // console.log(props.matches.L1[props.index].id);\n  const winner = () => {};\n  return (\n    <div id=\"match-border\">\n      <span\n        onClick={() => {\n          props.remove(props.matches.L2[props.index].id);\n\n          props.win(props.matches.L2[props.index].id, props.players.length);\n        }}\n        className=\"btn\"\n      >\n        {props.matches.L1[props.index].team}\n      </span>\n      <span\n        onClick={() => {\n          props.remove(props.matches.L1[props.index].id);\n\n          props.win(props.matches.L1[props.index].id, props.players.length);\n        }}\n        className=\"btn \"\n      >\n        {props.matches.L2[props.index].team}\n      </span>\n    </div>\n  );\n};\n\nexport default Matchup;\n// onClick={props.win}\n\n//\n//\n","import React, { Component } from \"react\";\nimport Matchup from \"../subcomponents/Matchup/Matchup\";\nimport \"./match.css\";\n\nclass Match extends Component {\n  //create state called started set to false\n  //state will change on button click to start the tournament\n  state = {\n    started: false,\n  };\n  startTournament = () => {\n    this.props.match();\n    this.setState((prevState) => {\n      return {\n        started: true,\n      };\n    });\n  };\n\n  render() {\n    const m = this.props.matches.L1;\n    let div;\n    if (this.state.started) {\n      div = (\n        <div id=\"matches\" className=\" \">\n          {m.map((playerData, index) => (\n            <Matchup\n              matches={this.props.matches}\n              remove={this.props.remove}\n              players={this.props.players}\n              key={index}\n              index={index}\n              win={this.props.win}\n            />\n          ))}\n        </div>\n      );\n    } else {\n      div = <h1>Game Not Started</h1>;\n    }\n\n    return (\n      <div id=\"match-container\" className=\"mb-5 \">\n        <button\n          className=\"mb-5 btn btn-success\"\n          onClick={() => this.startTournament()}\n          id=\"start\"\n        >\n          Generate Matches\n        </button>\n        {div}\n      </div>\n    );\n  }\n}\n\nexport default Match;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport \"./nav.css\";\nconst Nav = () => {\n  return (\n    <div id=\"nav-container\">\n      <Link to=\"/\">\n        <button className=\"btn btn-warning\"> Restart </button>\n      </Link>\n      <Link to=\"/match\">\n        <button className=\"start btn btn-warning\">Start </button>\n      </Link>\n    </div>\n  );\n};\n\nexport default Nav;\n","/**************\r\n ***Shuffle will handle the reshuffling of the sublists to add diversity tot the match generation\r\n *** PARAMS--- sublist Array (i.e. pLA or pLB )\r\n ***\r\n */\r\nconst shuffle = arr => {\r\n  arr.sort(() => Math.random() - 0.5);\r\n\r\n  return arr;\r\n};\r\n\r\nexport default shuffle;\r\n","import shuffle from \"./shuffle.js\";\n\n//split list into A/B\nconst split = (players) => {\n  let pLA = [];\n  let pLB = [];\n  for (var i = 0; i < players.length; i++) {\n    //if even\n    if (i % 2 === 0) {\n      pLA.push(players[i]);\n    } else if (i % 2 !== 0) {\n      //if odd\n      pLB.push(players[i]);\n    }\n  }\n  if (pLA.length > 0 && pLB.length > 0) {\n    if (pLA.length > pLB.length) {\n      pLB.push({\n        team: \"BYE\",\n        winToken: false,\n        played: false,\n        id: 100,\n      });\n    } else if (pLA.length < pLB.length) {\n      pLA.push({\n        team: \"BYE\",\n        winToken: false,\n        played: false,\n        id: 100,\n      });\n    }\n  }\n  return [shuffle(pLA), shuffle(pLB)];\n};\n\nexport default split;\n","import React, { Component } from \"react\";\nimport Form from \"../Form/Form\";\nimport Roster from \"../Roster/Roster\";\nimport Match from \"../Match/Match\";\nimport Nav from \"../Nav/Nav\";\nimport split from \"../../helpers/splitplayers.js\";\n// Router\n// <BrowserRouter basename=\"/course-directory\">\n//use this to add a  base router when sereved from a sub directory\n//use HashRouter instead much simpler\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n// css\nimport \"./app.css\";\n\nclass App extends Component {\n  //initialize state to hold the player list\n  placeHolderData = [\n    {\n      team: \"teamName\",\n      winToken: false,\n      played: false,\n      id: Math.random(),\n    },\n    {\n      team: \"aojnsj\",\n      winToken: false,\n      played: false,\n      id: Math.random(),\n    },\n    {\n      team: \"askdnlkann\",\n      winToken: false,\n      played: false,\n      id: Math.random(),\n    },\n    {\n      team: \"NIN\",\n      winToken: false,\n      played: false,\n      id: Math.random(),\n    },\n    {\n      team: \"obek\",\n      winToken: false,\n      played: false,\n      id: Math.random(),\n    },\n  ];\n  state = {\n    players: [],\n    currentMatches: {},\n    roster: [],\n  };\n  //Methods\n  /**************\n   ***\n   *** addPlayer will handle adding the players to the players roster List\n   ***PARAMS---- player1 , player2 , teamName\n   *** use prevState to manipulate state indirectly returning {the player list including ...prevState.players and the new entry }\n   ****/\n  addPlayer = (teamName) => {\n    this.setState((prevState) => {\n      return {\n        players: [\n          ...prevState.players,\n          {\n            team: teamName,\n            winToken: false,\n            played: false,\n            id: prevState.players.length + 1,\n          },\n        ],\n        roster: [\n          ...prevState.roster,\n          {\n            team: teamName,\n            winToken: false,\n            played: false,\n            id: prevState.players.length + 1,\n          },\n        ],\n      };\n    });\n  };\n\n  remove = (id) => {\n    console.log(id);\n    this.setState((prevState) => {\n      return {\n        players: prevState.players.filter((p) => {\n          return p.id !== id;\n        }),\n      };\n    });\n  };\n  win = (id, len) => {\n    if (this.state.players.length === 2) {\n      let winner = this.state.players.find((elm) => elm.id !== id).team;\n      alert(winner + \" is the winner\");\n    }\n  };\n  clearPlayer = () => {\n    this.setState((prevState) => {\n      return {\n        players: [],\n        currentMatches: {},\n        roster: [],\n      };\n    });\n  };\n\n  match = () => {\n    let [L1, L2] = split(this.state.players);\n\n    this.addMatch(L1, L2);\n  };\n  addMatch = (L1, L2) => {\n    this.setState((prevState) => {\n      return {\n        currentMatches: {\n          L1,\n          L2,\n        },\n      };\n    });\n  };\n  // Render Mehtod\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <div id=\"app-container\" className=\"container-fluid\">\n            <Route exact path=\"/\">\n              <div id=\"home-container\" className=\"\">\n                <section id=\"form-container\">\n                  <Form addPlayer={this.addPlayer} />{\" \"}\n                </section>{\" \"}\n                <section id=\"roster-container\">\n                  <h2>Roster</h2>\n                  <p>Teams: {this.state.players.length}</p>\n                  <Roster players={this.state.roster} />\n                  <button\n                    className=\"btn btn-danger\"\n                    onClick={() => {\n                      this.clearPlayer();\n                    }}\n                  >\n                    Clear Players <i class=\"fa fa-minus-circle\"></i>\n                  </button>\n                </section>\n                <Nav id=\"nav\" />\n              </div>\n            </Route>\n            <Route exact path=\"/match\">\n              <section id=\"match-wrapper\">\n                <Match\n                  remove={this.remove}\n                  players={this.state.players}\n                  matches={this.state.currentMatches}\n                  match={this.match}\n                  win={this.win}\n                />\n              </section>\n              <Nav />\n            </Route>\n          </div>\n        </Switch>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}