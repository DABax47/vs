{"version":3,"sources":["components/Form.js","components/subcomponents/Teamcard.js","components/Roster.js","components/subcomponents/Matchup.js","components/Match.js","helpers/shuffle.js","helpers/splitplayers.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","state","p1","p2","teamName","handleChange","e","target","getAttribute","setState","value","handleSubmit","preventDefault","props","addPlayer","id","className","autoComplete","onSubmit","this","name","onChange","type","placeholder","num","Component","Teamcard","team","style","backgroundColor","Roster","players","map","playerData","index","playerNames","key","Matchup","onClick","remove","matches","L2","win","length","L1","Match","started","startTournament","match","prevState","div","m","shuffle","arr","sort","Math","random","split","pLA","pLB","i","push","winToken","played","App","currentMatches","roster","console","log","filter","p","len","winner","find","elm","alert","addMatch","path","exact","to","localState","class","aria-hidden","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb0b64fc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./../css/form.css\";\r\nclass Form extends Component {\r\n  // FORM will have input fields so initialize local state to handle the defaul;t behavior of the form elements\r\n  //init State\r\n  //one property per input feild to collect multiple fields of data\r\n  state = {\r\n    p1: \"\",\r\n    p2: \"\",\r\n    teamName: \"\"\r\n  };\r\n\r\n  // Methods\r\n\r\n  /**************\r\n   ***\r\n   *** HandleChange will handle any changes in the input fields and update the state to reflect the value\r\n   ***PARAMS----event\r\n   *** setState() of each state property {playerName, teamName} to the value of he e.target\r\n   ****/\r\n  handleChange = e => {\r\n    if (e.target.getAttribute(\"name\") === \"p1\") {\r\n      this.setState({ p1: e.target.value });\r\n    } else if (e.target.getAttribute(\"name\") === \"p2\") {\r\n      this.setState({ p2: e.target.value });\r\n    } else if (e.target.getAttribute(\"name\") === \"TeamName\") {\r\n      this.setState({ teamName: e.target.value });\r\n    }\r\n  };\r\n\r\n  /**************\r\n   ***\r\n   *** handleSubmit will prevent the default actions from executing on the form element and\r\n   *** this method will call the addPlayer method that has been passed down via props sending the current states playerName and TeamName\r\n   ***PARAMS----event\r\n   ***\r\n   ****/\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addPlayer(this.state.p1, this.state.p2, this.state.teamName);\r\n\r\n    this.setState({ p1: \"\", p2: \"\", teamName: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"form-cnt\"\r\n        className=\"h-100 d-flex justify-content-center align-items-center\"\r\n      >\r\n        <form\r\n          autoComplete=\"off\"\r\n          id=\"signup\"\r\n          onSubmit={this.handleSubmit}\r\n          className=\"d-flex flex-column \"\r\n        >\r\n          <input\r\n            name=\"p1\"\r\n            onChange={this.handleChange}\r\n            value={this.state.p1}\r\n            type=\"text\"\r\n            placeholder=\"Player_1\"\r\n          />\r\n          <input\r\n            name=\"p2\"\r\n            onChange={this.handleChange}\r\n            value={this.state.p2}\r\n            type=\"text\"\r\n            placeholder=\"Player_2\"\r\n          />\r\n          <input\r\n            name=\"TeamName\"\r\n            onChange={this.handleChange}\r\n            value={this.state.teamName}\r\n            type=\"text\"\r\n            placeholder=\"Team\"\r\n          />\r\n\r\n          <input id=\"signup-btn\" type=\"submit\" value=\"SUBMIT\" />\r\n          <p>Teams: {this.props.num}</p>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport \"./../../css/sub/teamcard.css\";\nconst Teamcard = (props) => {\n  const [p1, p2] = props.name;\n  const team = props.teamName;\n\n  return (\n    <div id=\"show-card\" className=\" \" style={{ backgroundColor: \"white\" }}>\n      <div className=\"team\">\n        <h6 className=\"content \">\n          {p1} / {p2}\n        </h6>\n        <h5 className=\" content\"> {team}</h5>\n      </div>\n    </div>\n  );\n};\nexport default Teamcard;\n","import React, { Component } from \"react\";\r\nimport Teamcard from \"./subcomponents/Teamcard\";\r\nimport \"./../css/roster.css\";\r\nclass Roster extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      //return a teamCard for every object in the playerList State\r\n      <div id=\"roster\" className=\"d-flex justify-content-center align-items-center\">\r\n      <div  className=\" ros-box d-flex flex-wrap justify-content-between\">\r\n      {this.props.players.map((playerData, index) => (\r\n        <Teamcard\r\n          name={playerData.playerNames}\r\n          teamName={playerData.team}\r\n          key={index}\r\n          id={playerData.id}\r\n          players={playerData}\r\n        />\r\n      ))}\r\n      </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Roster;\r\n\r\n\r\n// <div id=\"roster\" className=\"d-flex flex-wrap justify-content-between\">\r\n//   {this.state.roster.map((playerData, index) => (\r\n//     <Teamcard\r\n//       name={playerData.playerNames}\r\n//       teamName={playerData.team}\r\n//       key={index}\r\n//       id={playerData.id}\r\n//       players={playerData}\r\n//     />\r\n//   ))}\r\n// </div>\r\n","import React from \"react\";\r\nimport \"./../../css/sub/matchup.css\";\r\nconst Matchup = props => {\r\n// console.log(props.matches.L2[props.index].id);\r\n// console.log(props.matches.L1[props.index].id);\r\n\r\n\r\n  return (\r\n    <div id=\"match-border\">\r\n      <div id=\"center\" className=\"d-flex flex-column align-items-center\">\r\n      <span\r\n        onClick={()=>{props.remove(props.matches.L2[props.index].id)\r\n\r\nprops.win(props.matches.L2[props.index].id,props.players.length)\r\n        }}\r\n\r\n        className=\"align-self-start bttn btn btn-danger\"\r\n      >\r\n      {props.matches.L1[props.index].team}\r\n      </span>\r\n      <span\r\n        onClick={()=>{props.remove(props.matches.L1[props.index].id)\r\n\r\n\r\n        props.win(props.matches.L1[props.index].id,props.players.length)\r\n\r\n\r\n      }}\r\n        className=\"align-self-end bttn btn btn-info\"\r\n      >\r\n      {props.matches.L2[props.index].team}\r\n      </span>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Matchup;\r\n// onClick={props.win}\r\n\r\n//\r\n//\r\n","import React, { Component } from \"react\";\r\nimport Matchup from \"./subcomponents/Matchup\";\r\nimport \"./../css/match.css\";\r\n\r\nclass Match extends Component {\r\n  //create state called started set to false\r\n  //state will change on button click to start the tournament\r\n  state = {\r\n    started: false\r\n  };\r\n  startTournament = () => {\r\n    this.props.match();\r\n    this.setState(prevState => {\r\n      return {\r\n        started: true\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const m = this.props.matches.L1\r\n    let div;\r\n    if (this.state.started) {\r\n       div =   <div\r\n          id=\"matches\"\r\n          className=\" d-flex flex-wrap flex-column justify-content-around text-center\"\r\n        >\r\n          {m.map((playerData, index) => (\r\n            <Matchup\r\n            matches ={this.props.matches}\r\n              remove={this.props.remove}\r\n              players={this.props.players}\r\n              key={index}\r\n              index={index}\r\n              win ={this.props.win}\r\n\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n    }else{\r\n       div = <h1>Not Started</h1>\r\n    }\r\n\r\n    return (\r\n      <div\r\n        id=\"match-cnt\"\r\n        className=\" d-flex flex-column justify-content-center\"\r\n      >\r\n      <button onClick={()=>this.startTournament()} id=\"start\">\r\n        Generate Match\r\n      </button>\r\n      {div}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Match;\r\n","/**************\r\n ***Shuffle will handle the reshuffling of the sublists to add diversity tot the match generation\r\n *** PARAMS--- sublist Array (i.e. pLA or pLB )\r\n ***\r\n */\r\nconst shuffle = arr => {\r\n  arr.sort(() => Math.random() - 0.5);\r\n\r\n  return arr;\r\n};\r\n\r\nexport default shuffle;\r\n","import shuffle from \"./shuffle.js\";\r\n\r\n//split list into A/B\r\nconst split = players => {\r\n  let pLA = [];\r\n  let pLB = [];\r\n  for (var i = 0; i < players.length; i++) {\r\n    //if even\r\n    if (i % 2 === 0) {\r\n      pLA.push(players[i]);\r\n    } else if (i % 2 !== 0) {\r\n      //if odd\r\n      pLB.push(players[i]);\r\n    }\r\n  }\r\n  if ( pLA.length > 0 && pLB.length > 0) {\r\n    if (pLA.length > pLB.length ) {\r\n  pLB.push(  {playerNames: [\"BYE\", \"BYE\"],\r\n    team: \"BYE\",\r\n    winToken: false,\r\n    played: false,\r\n    id:100});\r\n\r\n    }else if(pLA.length < pLB.length){\r\n          pLA.push( {playerNames: [\"BYE\", \"BYE\"],\r\n            team: \"BYE\",\r\n            winToken: false,\r\n            played: false,\r\n            id:100});\r\n    }\r\n\r\n  }\r\n  return [shuffle(pLA), shuffle(pLB)];\r\n};\r\n\r\nexport default split;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Roster from \"./Roster\";\r\nimport Match from \"./Match\";\r\nimport split from \"../helpers/splitplayers.js\";\r\n// Router\r\n// <BrowserRouter basename=\"/course-directory\">\r\n//use this to add a  base router when sereved from a sub directory\r\n//use HashRouter instead much simpler\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n// css\r\nimport \"./../css/app.css\";\r\n\r\nclass App extends Component {\r\n  //initialize state to hold the player list\r\n\r\n\r\n  state = {\r\n    players: [ ],\r\n\r\n    currentMatches: {},\r\n    roster:[]\r\n  };\r\n  //Methods\r\n  /**************\r\n   ***\r\n   *** addPlayer will handle adding the players to the players roster List\r\n   ***PARAMS---- player1 , player2 , teamName\r\n   *** use prevState to manipulate state indirectly returning {the player list including ...prevState.players and the new entry }\r\n   ****/\r\n  addPlayer = (p1, p2, teamName) => {\r\n    this.setState(prevState => {\r\n      return {\r\n        players: [\r\n          ...prevState.players,\r\n          {\r\n            playerNames: [p1, p2],\r\n            team: teamName,\r\n            winToken: false,\r\n            played: false,\r\n            id: prevState.players.length +1\r\n          }\r\n        ],\r\n        roster:[  ...prevState.roster,\r\n          {\r\n            playerNames: [p1, p2],\r\n            team: teamName,\r\n            winToken: false,\r\n            played: false,\r\n            id:prevState.players.length +1\r\n          }]\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  remove=(id)=>{\r\n    console.log(id);\r\n    this.setState(prevState=>{\r\n      return{players:prevState.players.filter((p)=>{\r\n        return p.id !== id\r\n      })}\r\n    })\r\n  }\r\nwin=(id,len)=>{\r\n  if (this.state.players.length === 2) {\r\n    let winner =this.state.players.find(elm=> elm.id !== id).team;\r\n    alert(winner +' is the winner');\r\n\r\n  }\r\n}\r\n\r\n  match = () => {\r\n\r\n    let [L1, L2] = split(this.state.players);\r\n\r\n    this.addMatch(L1,L2);\r\n  };\r\n  addMatch = (L1,L2) => {\r\n    this.setState(prevState => {\r\n      return {\r\n        currentMatches: {L1,L2}\r\n      };\r\n    });\r\n  };\r\n  // Render Mehtod\r\n  render() {\r\n    return (\r\n    <Router>  <div id='app'>\r\n      <Route path='/' exact>\r\n       <section id=\"reg\">\r\n          <Form addPlayer={this.addPlayer} num={this.state.players.length}/>\r\n          <Link  to ='/roster'><button onClick={this.localState}className='start'>START<i class=\"fa fa-arrow-circle-o-right\" aria-hidden=\"true\"></i></button></Link>\r\n\r\n        </section>\r\n        </Route>\r\n    <Route path='/roster' exact>\r\n    <section id=\"ros\">\r\n  <span className='ros-links'>\r\n  <Link  to ='/'><button >Add Players</button></Link>\r\n  <Link  to ='/match'><button >Start</button></Link>\r\n  </span>\r\n          <Roster  players={this.state.roster}/>\r\n\r\n        </section>\r\n        </Route>\r\n      <Route path='/match'>\r\n       <section id=\"match\">\r\n          <Match\r\n            remove={this.remove}\r\n            players={this.state.players}\r\n            matches ={this.state.currentMatches}\r\n            match ={this.match}\r\n            win = {this.win}\r\n          />\r\n            <Link  to ='/'><button >Restart</button></Link>\r\n        </section>\r\n        </Route>\r\n      </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}